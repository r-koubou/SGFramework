<#@ template language="C#" visibility="internal" linePragmas="false" #>
//
// Generated by ValueObjectGenerator
// DO NOT EDIT THIS FILE
//
using System;
using System.Diagnostics.CodeAnalysis;
<# ValueName = ValueName.Replace( "\"", "" ); #>
<# if( !string.IsNullOrEmpty( Namespace ) ) { #>
namespace <#= Namespace #>
{
<# } #>
    public partial class <#= Name #> : IEquatable<<#= Name #>><#= ValueOption.HasFlag( ValueOption.Comparable ) ? $", IComparable<{Name}>" : "" #>
    {
        public <#= BaseTypeName #> <#= ValueName #> { get; }

        public <#= Name #>( <#= BaseTypeName #> value )
        {
<# /* Min, Max */ #>
<# if( !string.IsNullOrEmpty( Min ) && !string.IsNullOrEmpty( Max ) ) { #>
            if( value < (<#= Min #>) || value > (<#= Max #>) )
            {
                throw new ArgumentOutOfRangeException( $"<#= Name #> : {value} (range:<#= Min #> < <#= Max #>)" );
            }
            <#= ValueName #> = value;
<# /* No Validation */ #>
<# } else if( ValueOption.HasFlag( ValueOption.NonValidating ) ) { #>
            <#= ValueName #> = value;
<# } else { #>
            <#= ValueName #> = Validate( value );
<# } #>
        }

<# /* Validate method */ #>
<# if( ( string.IsNullOrEmpty( Min ) && string.IsNullOrEmpty( Max ) ) && !ValueOption.HasFlag( ValueOption.NonValidating ) ) { #>
        private static partial <#= BaseTypeName #> Validate( <#= BaseTypeName #> value );
<# } #>

<# /* ToString */ #>
<# if( !ValueOption.HasFlag( ValueOption.ToString ) ) { #>
        //
        // Default ToString()
        //
        public override string ToString()
        {
            return <#= ValueName #>.ToString();
        }
<# } else { #>
        //
        // Custom ToString()
        //
        private partial string ToStringImpl();

        public override string ToString()
        {
            return ToStringImpl();
        }
<# } #>

        //----------------------------------------------------------------------
        // Equality
        //----------------------------------------------------------------------
        public bool Equals( [AllowNull] <#= Name #> other )
        {
            if( ReferenceEquals( null, other ) )
            {
                return false;
            }

            if( ReferenceEquals( this, other ) )
            {
                return true;
            }

            return <#= ValueName #> == other.<#= ValueName #>;
        }

        public override bool Equals( [AllowNull] object obj )
        {
            if( ReferenceEquals( null, obj ) )
            {
                return false;
            }

            if( ReferenceEquals( this, obj ) )
            {
                return true;
            }

            if( obj.GetType() != this.GetType() )
            {
                return false;
            }

            return Equals( (<#= Name #>)obj );
        }

        // HashCode
        public override int GetHashCode() => <#= ValueName #>.GetHashCode();

        // Operator ==, !=
        public static bool operator ==( <#= Name #> a, <#= Name #> b )
        {
            if( ReferenceEquals( a, b ) )
            {
                return true;
            }

            return a?.Equals( b ) ?? ReferenceEquals( null, b );
        }

        public static bool operator !=( <#= Name #> a, <#= Name #> b )
        {
            return !( a == b );
        }

        //----------------------------------------------------------------------
        // <#= ValueOption.HasFlag( ValueOption.Implicit ) ? "Implicit" : "Explicit" #>
        //----------------------------------------------------------------------
        public static <#= ValueOption.HasFlag( ValueOption.Implicit ) ? "implicit" : "explicit" #> operator <#= BaseTypeName #>( <#= Name #> x )
        {
            return x.<#= ValueName #>;
        }

        public static implicit operator <#= Name #>( <#= BaseTypeName #> value )
        {
            return new <#= Name #>( value );
        }

<# if( ValueOption.HasFlag( ValueOption.Comparable ) ) { #>
        //----------------------------------------------------------------------
        // Comparable
        //----------------------------------------------------------------------
        public int CompareTo( <#= Name #> other )
        {
            if( ReferenceEquals( this, other ) )
            {
                return 0;
            }

            if( ReferenceEquals( null, other ) )
            {
                return 1;
            }

            return <#= ValueName #>.CompareTo( other.<#= ValueName #> );
        }
<# } #>

    }

<# if( !string.IsNullOrEmpty( Namespace ) ) { #>
}
<# } #>
